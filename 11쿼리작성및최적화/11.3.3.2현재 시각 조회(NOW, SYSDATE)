두 함수 모두 현재의 시간을 반환하는 함수. 같은 기능.

NOW(), SYSDATE() 작동방식의 차이점?
하나의 SQL에서 모든 NOW()함수는 같은 값을 가짐.
SYSDATE() 함수는 하나의 SQL 내에서도 호출 시점에 따라 결괏값이 달라짐.

(SLEEP() : 2초 동안 대기하게 하는 함수)

mysql> SELECT NOW(), SLEEP(2), NOW();

mysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();

SYSDATE()의 특성상 큰 잠재적인 문제가 2가지 있다.
1. SYSDATE() 함수가 사용된 SQL은 레플리카 서버에서 안정적으로 복제되지 못함.
        (복제, Replication : 한 서버에서 다른 서버로 데이터가 동기화.
         원본 데이터를 가진 서버는 소스(source) 서버, 복제된 데이터를 가지는 서버는 레플리카(replica) 서버)
2. SYSDATE() 함수와 비교되는 칼럼은 인덱스를 효율적으로 사용하지 못함.

2번에 대한 예제)
mysql>  EXPLAIN
        SELECT emp_no, salary, from_date(), to_date
        FROM salaries
        WHERE emp_no = 10001 AND from_date > NOW();

mysql>  EXPLAIN
        SELECT emp_no, salary, from_date, to_date
        FROM salaries
        WHERE emp_no = 10001 AND from_date > SYSDATE();

NOW()
emp_no, from_date 모두 적절히 인덱스를 사용. 인덱스 전체 길이 7바이트를 모두 사용.
쿼리 실행 시점에서 실행되고 값을 할당 받음. 쿼리의 실행 시간에 관계없이 항상 같은 값을 보장.

SYSDATE()
emp_no에 속하는 4바이트만 레인지 스캔에 사용.
이 함수가 호출될 때마다 다른 값을 반환하기에 상수가 아니다. 인덱스 스캔을 할 때에도 매번 비교되는 레코드마다 함수를 실행해야함.

필요하지 않다면 SYSDATE() 함수의 사용을 지양하는 것을 추천.
이미 사용 중인 경우 MySQL 서버 설정 파일(my.cnf, my.ini)에 sysdate-is-now 시스템 변수를 삽입 후 활성화하는 것이 바람직.

일반적인 웹 서비스에서 굳이 SYSDATE()를 사용할 이유가 없음.
시스템 설정파일(my.cnf)에 sysdate-is-now 변수를 추가하여 NOW()와 동일하게 작동하도록 함.
복제를 사용하고 있다면 모든 복제 소스 서버와 레플리카 서버에 공통으로 적용할 것을 권장.