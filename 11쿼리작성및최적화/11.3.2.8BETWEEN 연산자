BETWEEN 연산자

"크거나 같다", "작거나 같다"라는 두 개의 연산자를 합친 연산자.
BETWEEN 연산자는 다른 비교 조건과 결합해 하나의 인덱스를 사용할 때 주의해야할 점이 있다.

예시) 동등 비교 연산자와 BETWEEN 연산자를 이용해 부서 번호와 사원 번호로 dept_emp 테이블을 조회하는 쿼리
SELECT * FROM dept_emp
WHERE dept_no='d003' AND emp_no=10001;

SELECT * FROM dept_emp
WHERE dept_no BETWEEN 'd003' AND 'd005' AND emp_no=10001;

dept_emp 테이블에는 (dept_no, emp_no) 칼럼으로 구성된 프라이머리 키가 존재한다.
그래서 1번 쿼리는 dept_no와 emp_no 조건 모두 인덱스를 이용해 범위를 줄여주는 방법을 사용할 수 있다.

2번 쿼리에서 사용한 BETWEEN은 크다(>) 또는 작다(<) 같이 범위를 읽어야 하는 연산자다.
이 때문에 dept_no가 'd003'보다 크거나 같고 'd005'보다 작거나 같은 모든 인덱스 범위를 검색해야만 한다.
결국 BETWEEN이 사용된 쿼리에서 emp_no=10001 조건은 비교 범위를 줄이는 역할을 하지 못했다.

BETWEEN은 크다와 작다를 하나로 묶어둔 것에 가까운 반면(선형으로 인덱스 검색) IN 연산자의 처리방법은 동등 비교(=) 연산자와 비슷하다(동등비교를 여러 번 수행하는 효과).
IN 연산자는 여러 개의 동등 비교를 하나로 묶은 것과 같아 IN과 동등 비교 연산자는 같은 형태의 인덱스를 사용한다.

BETWEEN 조건을 사용하는 위의 쿼리는 dept_emp 테이블의 (dept_no, emp_no) 인덱스의 상당히 많은 레코드(전체 데이터 1/3)을 읽는다.
하지만 가져오는 레코드는 하나. (10만 건을 검색해서 1건 가져옴. 낭비)

-- rows : 3
EXPLAIN
SELECT * FROM dept_emp
WHERE dept_no IN ('d003', 'd004', 'd005')
AND emp_no = 10001;

[검색 범위: ('d003',10001), ('d004',10001), ('d005',10001)]

-- rows : 164767
EXPLAIN
SELECT * FROM dept_emp USE INDEX(PRIMARY)
WHERE dept_no BETWEEN 'd003' AND 'd005' AND emp_no=10001;

[검색 범위: dept_no 'd003' ~ 'd005' ...> 위의 조합을 찾음.]

( USE INDEX(PRIMARY)가 없다면 서버는 emp_no, from_date를 인덱스로 사용했을 것. 인덱스가 없다고 가정한 상태에서 BETWEEN과 IN 연산자의 비교를 위해 사용..)
둘 다 인덱스 레인지 스캔을 하고 있으나 레코드 건수는 매우 큰 차이.

에전의 MySQL 서버는 BETWEEN을 IN 연산자로 변경하기 위해 'd003' ~ 'd005' 사이에 모든 부서 코드 값을 끌고 in 형태를 만들어야 했다.
하지만 8.0버전 부터는 IN (subquery) 형태로 작성 시 옵티마이저가 세미 조인 최적화를 통해 더 빠른 쿼리로 변환해 실행함.

SELECT *
FROM dept_emp USE INDEX(PRIMARY)
WHERE dept_no IN (
    SELECT dept_no
    FROM departments
    WHERE dept_no BETWEEN 'd003' AND 'd005')
AND emp_no = 10001;

(departments 테이블에서 dept_no 칼럼은 프라이머리 키로 항상 유니크한 결과를 가져다 준다. 이 예제는 단순 조인으로 변경해 실행할 수 있다.

SELECT *
FROM departments d
INNER JOIN dept_emp de USE INDEX(PRIMARY) ON de.dept_no=d.dept_no AND de.emp_no=10001
WHERE d.dept_no BETWEEN 'd003' AND 'd005';