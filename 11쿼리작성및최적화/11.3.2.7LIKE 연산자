REGEXP 연산자보다 훨씬 단순한 문자열 패턴 비교 연산자이나 DBMS에선 LIKE 연산자를 더 많이 사용한다.
REGEXP 연산자는 인덱스를 전혀 사용하지 못하나 LIKE 연산자는 인덱스를 이용해 처리할 수도 있다.

LIKE 연산자는 어떤 상수 문자열이 있는지 없는지 정도만 판단하는 연산자.

mysql> SELECT 'abcdef' LIKE 'abc%';
mysql> SELECT 'abcdef' LIKE '%abc';
mysql> SELECT 'abcdef' LIKE '%ef';

LIKE에서 사용할 수 있는 와일드카드 문자는 "%", "_"가 전부다.
REGEXP는 비교 대상 문자열의 일부에 대해서만 일치해도 TRUE를 반환한다.
그러나 LIKE는 항상 비교 대상 문자열의 처음부터 끝까지 일치하는 경우에만 TRUE를 반환한다.

%
    0 또는 1개 이상의 모든 문자에 일치(문자 내용 관계없이)
_
    정확히 1개의 문자에 일치(문자의 내용 관계없이)

와일드카드 문자인 '%'나 '_' 문자 자체를 비교한다면 ESCAPE 절을 LIKE 조건 뒤에 추가해 이스케이프 문자(Escape sequence)를 설정할 수 있다.

mysql> SELECT 'abc' LIKE 'a%';
mysql> SELECT 'a%' LIKE 'a%';
mysql> SELECT 'abc' LIKE 'a/%' ESCAPE '/';
mysql> SELECT 'a%' LIKE 'a/%' ESCAPE '/';

LIKE 연산자는 와일드카드 문자인(%, _)가 검색어의 뒤쪽에 있다면 인덱스 레인지 스캔으로 사용할 수 있다.
그러나, 와일드카드가 검색어의 앞쪽에 있다면 인덱스 레인지 스캔을 사용할 수 없으므로 주의하여 사용해야 한다.

mysql> EXPLAIN SELECT COUNT(*) FROM employees WHERE first_name LIKE 'Christ%';
Chirst로 시작하는 이름을 검색하려면 위와 같이 인덱스 레인지 스캔을 이용해 검색할 수 있다.

mysql> EXPLAIN SELECT COUNT(*) FROM employees WHERE first_name LIKE '%rist';
하지만 "rist"로 끝나는 이름을 검색할 땐 와일드카드가 검색어의 앞쪽에 있게 된다.
이 경우 인덱스의 Left-most 특성으로 인해 레인지 스캔을 사용하지 못하고 인덱스를 처음부터 끝까지 읽는 풀 스캔 방식으로 쿼리가 처리한다.
(탐색한 rows의 차이가 상당히 크다.)