MySQL 시스템 설정, sql_mode
MySQL 서버의 설저 파일에서 sql_mode를 설정할 땐 구분자(,)를 이용해 여러 키워드들을 동시에 설정할 수 있다.

MYSQL8.0 서버의 sql_mode 기본 설정 값
- ONLY_FULL_GROUP_BY
- STRICT_TRANS_TABLES
- NO_ZERO_IN_DATE
- ERROR_FOR_DIVISION_BY_ZERO
- NO_ENGINE_SUBSTITUTION

기존 버전에서 8.0으로 업그레이드 시 ONLY_FULL_GROUP_BY 설정에 유의

STRICT_ALL_TABLES, STRICT_TRANS_TABLES
    MySQL 서버에서 INSERT나 UPDATE 문장으로 데이터를 변경할 때
    칼럼의 타입과 저장되는 값의 타입이 다를 때 자동으로 타입 변경을 수행한다.

    이때 타입이 적절히 변환되기 어렵거나 칼럼에 저장될 값이 없거나 값의 길이가 칼럼의 최대 길이보다 큰 경우
    MySQL 서버가 INSERT나 UPDATE 문장을 계속 실행할지 에러를 발생시킬지 결정한다.

    STRICT_TRANS_TABLES 옵션(TRANS = TRANSACTION)은 InnoDB같은 트랜잭션을 지원하는 스토리지 엔진에만 엄격 모드(Strict Mode)를 적용하며,
    STRICT_ALL_TABLES 옵션은 트랜잭션 지원여부와 무관하게 모든 스토리지 엔진에만 엄격 모드(Strict Mode)를 적용한다.

    이 모드들은 MySQL 서버의 서비스 적용 전 반드시 활성화할 것을 권장한다. 서비스 도중 이 두 옵션을 변경해야 한다면 응용 프로그램에서 사용하는 INSERT와 DELETE 문장을 검토해
    의도하지 않은 결과가 발생하지 않도록 주의하자.

ANTI_QUOTES
    MySQL에선 문자열 값(리터럴)을 표현하기 위해 홑따옴표와 쌍따옴표를 동시에 사용할 수 있다.
    그러나 오라클 같은 DBMS는 홑따옴표를 문자열 값을 표기하는 데 사용하고, 쌍따옴표는 칼럼명이나 테이블명과 같은 식별자(Identifier)를 구분하는 용도로만 사용한다.

    동시에 사용하는 것이 가독성에도 딱히 좋지 못하다.
    sql_mode에서 ANSI_QUOTES를 설정하면
    홑따옴표만 문자열 값 표기로 사용할 수 있고,
    쌍따옴표는 칼럼명이나 테이블명과 같은 식별자를 표기하는 데만 사용할 수 있다.

ONLY_FULL_GROUP_BY
    MySQL의 쿼리에선 GROUP BY 절에 포함되지 않은 칼럼이더라도 집합 함수의 사용 없이 그대로 SELECT 절이나 HAVING 절에 사용할 수 있다. (SQL 표준 및 다른 DBMS와는 다른 부분)
    ONLY_FULL_GROUP_BY 설정 시 SQL 문법에 조금 더 엄격한 규칙을 적용한다.

    MySQL 5.7 버전까지 기본값으로 비활성화 되어있던 부분이나 MySQL 8.0 부터는 이 옵션이 기본값으로 활성화 되어있다. 업그레이드 할 때 시스템 변수(ONLY_FULL_GROUP_BY)에 주의한다.

    ONLY_FULL_GROUP_BY 옵션 활성화되면 절이 사용된 문장의 SELECT 절에는 GROUP BY 절에 명시된 칼럼과 집계 함수(COUNT 또는 SUM과 같은 그룹 함수)만 사용 가능하다.
    SELECT 절에 집계 함수가 사용되는 경우 GROUP BY 절에 명시되지 않은 칼럼도 집계 함수의 인자로 사용할 수 있다.
    5.7에서 8.0으로 업그레이드하는 경우 이 옵션을 비활성화 해야할 수도 있다.

PIPE_AS_CONCAT (PIPES_AS_CONCAT)
    MySQL에서 "||"는 OR와 같은 의미로 사용된다.
    sql_mode 시스템 변수에서 PIPE_AS_CONCAT 값을 설정하면 오라클과 같이 문자열 연결 연산자(CONCAT)로 사용할 수 있다.

PAD_CHAR_TO_FULL_LENGTH
    MySQL에선 CHAR 타입이라도 VARCHAR와 같이 유효 문자열 뒤의 공백문자는 제거되어 반환된다.
    애플리케이션 개발자에게 특히 민감한 부분으로 뒤쪽의 공백문자가 제거되지 않은 채로 반환되도록 한다면
    sql_mode 시스템 설정에서 PAD_CHAR_TO_FULL_LENGTH을 추가하면 된다.
    [15.1장 문자열(CHAR와 VARCHAR)]에서 계속

NO_BACKSLASH_ESCAPES
    MySQL에서도 일반적인 프로그래밍 언어처럼 역슬래시 문자를 이스케이프 문자로 사용할 수 있다.
    sql_mode 시스템 설정에서 NO_BACKSLASH_ESCAPES를 추가하면 역슬래시 문자의 이스케이프 용도로의 사용이 금지된다. 역슬래시도 다른 문자와 동일하게 취급하게 된다.
    [15.1장 문자열(CHAR와 VARCHAR)]에서 계속

IGNORE_SPACE
    MySQL에서 스토어드 프로시저나 함수의 이름 뒤에 공백이 있으면 "스토어드 프로시저나 함수가 없습니다."라는 에러가 출력될 수도 있다.
    MySQL에선 스토어드 프로시저나 함수명과 괄호 사이에 있는 공백까지도 프로시저나 함수의 이름으로 간주한다. 이 동작방식이 기본모드이다.

    sql_mode 시스템 변수에 IGNORE_SPACE를 추가하면 프로시저나 함수명과 괄호 사이의 공백은 무시한다.
    IGNORE_SPACE 옵션은 MySQL 서버의 내장 함수에만 적용되고 옵션 활성화 시 MySQL 서버의 내장 함수는 모두 예약어로 간주되어 테이블이나 칼럼의 이름으로 사용될 수 없다.
    역따옴표(`,bactick)를 이용하면 예약어를 테이블이나 칼럼의 이름으로 사용할 수 있다.

REAL_AS_FLOAT
    MySQL 서버에선 부동 소수점 타입은 FLOAT와 DOUBLE 타입을 지원한다. REAL은 DOUBLE과 동의어로 사용한다.
    하지만 REAL_AS_FLOAT 모드가 활성화되면 MySQL 서버는 REAL 타입이 FLOAT 타입의 동의어로 바뀐다.

NO_ZERO_IN_DATE, NO_ZERO_DATE
    이 두 옵션을 활성화하면 MySQL 서버는 DATETIME 타입 칼럼에 잘못된 날짜를 저장할 수 없다. ("2023-00-00", "0000-00-00", ...)
    존재하지 않는 날짜를 저장하지 못하게 된다.

ANSI
   앞에 설명한 여러 옵션을 조합하여 MySQL 서버가 최대한 SQL 표준에 맞게 동작하게 만들어준다.
   ANSI 모드는 REAL_AS_FLOAT, PIPES-AS-CONCAT, ANSI_QUOETS, IGNORE_SPACE, ONLY_FULL_GROUP_BY 모드의 조합이다.

TRANDITIONAL
    STRICT_TRANS_TABLE, STRICT_ALL_TABLES와 비슷하나 더 엄격한 방법으로 SQL의 작동을 제어한다.
    TRANDITIONAL 모드는 STRICT_TRANS_TABLES, STRICT_ALL_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, NO_ENGINE_SUBSTITUTION 모드의 조합이다.
    sql_mode 활성화 시 TRANDITIONAL 모드가 아닐 때 경고로 처리한 상황이 모두 에러로 바뀌고 SQL 문장은 실패한다.