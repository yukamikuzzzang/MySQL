문자열 값이 어떤 패턴을 만족하는지 확인하는 연산자.
RLIKE는 REGEXP와 똑같은 비교를 수행하는 연산자.

RLIKE는 오른쪽 일치용 LIKE 연산자(Right LIKE)와 다르다.
정규 표현식(Regular expression)을 비교하는 연산자다.

REGEXP 연산자 사용을 위해선 REGEXP 연산자의 좌측에 비교 대상 문자열 값 또는 문자열 칼럼을, 우측에 검증하고자 하는 정규 표현식을 사용하면 된다.

예제: "abc"라는 문자열 값이 'x','y','z' 문자로 시작하는지 검증하는 표현식의 예.
mysql> SELECT 'abc' REGEXP '^[x-z]';

정규 표현식은 자바 또는 자바스크립트 같은 언어에서 많이 사용됨. (자바스크립트에서 정규 표현식 부분을 참고)

REGEXP 연산자의 정규 표현식은 POSIX 표준으로 구현되어 있음.
정규 표현식에서 사용하는 패턴 키워드를 그대로 사용할 수 있음. (대표적인 것들만 확인)

^
    문자열의 시작을 표시. 정규 표현식은 표현식에 일치하는 부분이 문자열의 시작, 중간 또는 끝부분 어디에 있어도 괜찮다.
    그러나 "^" 심벌을 표현식의 앞쪽에 두면 일치하는 부분이 반드시 제일 앞쪽에 있어야 함을 의미한다.
$
    문자열의 끝을 표시. "^"와 반대로 표현식의 끝부분에 "$"를 넣으면 일치하는 부분이 반드시 문자열의 제일 끝에 있어야 함을 의미한다.
[]
    문자 그룹을 표시. [xyz] 또는 [x-z]라 표현하면 'x','y','z' 문자 중 하나인지 확인하는 것이다.
    대괄호는 문자열이 아닌 문자 하나와 일치하는지를 확인하는 것을 의미한다.
()
    문자열 그룹 표시. (xyz)라 표현 시 세 문자 중 한 문자가 있는지 체크하는 것이 아닌 반드시 "xyz" 모두가 있는지 확인하는 것이다.
|
    "|"로 연결된 문자열 중 하나인지 확인한다. "abc|xyz"로 표현하면 "abc"이거나 "xyz"인지 확인하는 것이다.
.
    어떠한 문자든지 1개의 문자를 표시. 정규 표현식으로 "..."으로 표시했다면 3개의 문자(실제 문자의 값과 관계없음)로 구성된 문자열을 찾는 것이다.
*
    이 기호 앞에 표시된 정규 표현식이 0 또는 1번 이상 반복될 수 있다는 표시.
+
    이 기호 앞에 표시된 정규 표현식이 1번 이상 반복될 수 있다는 표시.
?
    이 기호 앞에 표시된 정규 표현식이 0 또는 1번만 올 수 있다는 표시.

예시
[0~9]*
'0'~'9'까지의 숫자만 0 또는 1번 이상 반복되는 문자열을 위한 정규 표현

[a-z]*
'a'~'z'까지의 소문자 알파벳만 0 또는 1번 이상 반복되는 문자열을 위한 정규 표현

[a-zA-z]*
'a'~'z'까지, 그리고 'A'~'Z'까지 대소문자 알파벳만 0 또는 1번 이상 반복되는 문자열을 위한 정규 표현

[a-zA-Z0-9]*
영문 대소문자와 숫자만으로 구성된 문자열에 대한 정규 표현

^Tear
Tear 문자열로 시작하는 정규 표현

Tear$
Tear 문자열로 끝나는 정규 표현

^Tear$
Tear와 같은 문자열에 대한 정규 표현.
'T'로 시작하고 연속으로 ear이 나타나야하며, 그 뒤에 아무런 문자가 없어야 한다.

REGEXP 연산자를 문자열 칼럼 비교에 사용할 때 REGEXP 조건의 비교는 인덱스 레인지 스캔을 사용할 수 없다.
따라서 WHERE 조건절에 REGEXP 연산자를 사용한 조건을 단독으로 사용하는 것은 성능상 좋지 않다.
가능하면 데이터 조회 범위를 줄일 수 있는 조건과 함께 REGEXP 연산자를 사용하길 권장한다.


(인덱스 레인지 스캔 : 테이블의 인덱스 부분을 바탕으로 탐색.)
(레인지 스캔 : 테이블의 특정 부분을 탐색.)